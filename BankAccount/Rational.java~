// Derek Song
// APCS1 - pd1
// HW #36 - Be Rational
// 2017 - 11 - 18

public class Rational {
    
    //Instance Vars
    int numer;
    int denom;

    //Default Constructor
    public Rational() {
	numer = 0;
	denom = 1;
    }

    //Constructor
    public Rational (int num, int den) {
	this();
	if (den != 0) { //undefined if den = 0
	    numer = num;
	    denom = den;
	}	
    }

    //toString
    public String toString() {
	return numer + "/" + denom;
    }

    //floatValue
    public double floatValue(double x) {
	double ans = numer / denom;
	return ans;
    }

    //multiply
    public void multiply(Rational x) {
	numer = numer * x.numer;
	denom = denom * x.denom;
    }

    //divide
    public void divide(Rational x) {
	numer = numer * x.denom;
	denom = denom * x.numer;
    }

    public static void main(String [] args) {
	Rational r = new Rational(2,3);
	Rational s = new Rational(1,2);

	System.out.println("original r: " + r); // shows before operation
	System.out.println("original s: " + s);
	System.out.println("======after multiply=======");
	
        r.multiply(s);
	System.out.println("multiplied r: " + r); // after operation
	System.out.println("multiplied s: " + s);
	System.out.println("---------------------------");

	Rational R = new Rational (2,3);
	Rational S = new Rational (1,2);

	
	System.out.println("original r: " + R); // shows before operation
	System.out.println("original s: " + S);
	System.out.println("======after divide=======");

	R.divide(S);
	System.out.println("divided r: " + R); // shows before operation
	System.out.println("divided s: " + S);
	System.out.println("---------------------------");
    }
}
